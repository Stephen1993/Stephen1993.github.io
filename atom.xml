<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Stephen</title>
  <subtitle>做一些有趣的事, 做一个有趣的人。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chenyangblog.com/"/>
  <updated>2017-03-16T09:32:50.000Z</updated>
  <id>http://chenyangblog.com/</id>
  
  <author>
    <name>Stephen</name>
    <email>chenyang.zhang@outlook.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>经验产品体验报告</title>
    <link href="http://chenyangblog.com/2017/03/16/%E7%BB%8F%E9%AA%8C%E4%BA%A7%E5%93%81%E4%BD%93%E9%AA%8C%E6%8A%A5%E5%91%8A.html"/>
    <id>http://chenyangblog.com/2017/03/16/经验产品体验报告.html</id>
    <published>2017-03-16T09:12:48.000Z</published>
    <updated>2017-03-16T09:32:50.000Z</updated>
    
    <content type="html"><![CDATA[<p><hr></p>
<h4 id="经验产品的定位"><a href="#经验产品的定位" class="headerlink" title="经验产品的定位"></a>经验产品的定位</h4><blockquote>
<p>百度经验是用户根据自己的实际经验分享出来解决某一个特定问题的平台。</p>
</blockquote>
<h4 id="经验产品个人中心管理"><a href="#经验产品个人中心管理" class="headerlink" title="经验产品个人中心管理"></a>经验产品个人中心管理</h4><blockquote>
<p>1.个性签名限制字数为14字，字数太少，不方便写个性签名，不清楚这样限制的目的是为何，并且点击确认后实际上已经向后台发送了修改请求，但是前台的弹框没有消失掉，不做任何反应，造成修改失败的误解，体验有待优化。  </p>
<p>2.对于 经验/关注/粉丝/我的关注/我的粉丝/我的疑问等tab点击切换，会重新加载页面，没有做js的无感之加载数据，体验有待优化。  </p>
<p>3.高悬赏和低悬赏的区分，目前无高悬赏，这部分应该进行用户调研和数据观察，争取有高悬赏吸引回答者，低悬赏显示的价格和已领取进去之后显示的价格不一致，不知道怎么计算出来的，而且已悬赏进去之后会有多一点现金，红包以及财富值和经验奖励，这部分收入比较吸引人，应该在悬赏那一列就显示，更能吸引答主。  </p>
<p>4.放弃回答问题的时候，不仅应该提示用户每天只有5次的放弃机会，还应该提示用户目前剩余几次的放弃机会，更加明朗，并且让用户实时的考虑当前这个问题是否要放弃。  </p>
<p>5.同一个问题只能被一个人领取，并且领取后该问题就被锁定，其他人无法看到，这样感觉不太好，一个问题应该可以让多人回答，并且让提问用户选出哪个更有帮助。<br><a id="more"></a></p>
</blockquote>
<h4 id="经验首页"><a href="#经验首页" class="headerlink" title="经验首页"></a>经验首页</h4><blockquote>
<p>1.首页的banner是一个很醒目的位置，更吸引人眼球，但是banner里轮播的经验即不是最新的也不是最热门的，反而有些很旧的经验(我的首页是这样)，所以感觉很奇怪，容易给用户感觉这个板块很久没有更新，没人维护了，一种凋零的不热闹的感觉。  </p>
<p>2.我的经验这个板块，应该显示用户最关心的信息和最容易忽视但是重要的信息，目前显示了用户的等级/昵称/活跃天数，从我体验的角度觉得应该加上 我的财富/我正在做的任务/我已领取的悬赏/悬赏回答文章还有多久过期 等容易被用户忽视的信息。  </p>
<p>3.热门经验这，选择的是24小时热门经验，但是给我显示的经验并不是最热门的也不是24小时内的，文不对题，感觉很奇怪，很多的文章是较老旧的，还是会让用户感觉这个板块不热闹，没有多少用户在这边，一种萧条的感觉。  </p>
<p>4.可能感兴趣这个板块，貌似数据是被写死的，这个板块理论上推荐的数据应该是个性化推荐，根据用户关注的分类/最近的浏览/点赞信息/评论信息/停留时间等等标签进行个性化推荐。  </p>
<p>5.人物志这一块，我这边总是固定的显示一个人，容易给用户的感觉是这一块是被固定写好的，数据上会让人觉得是假的，也有板块不”活”的感觉，个人感觉这一块可以加上轮播，并且人物志里面的评论和文章发表title也可以轮播出来，创造一种时时刻刻都有人在，热闹的氛围。</p>
</blockquote>
<h4 id="经验分类"><a href="#经验分类" class="headerlink" title="经验分类"></a>经验分类</h4><blockquote>
<p>1.分类板块蛮有用的，在自己没有确定问题情况下可以选择自己感兴趣的分类然后进去学习，在有确定的问题时也可以进去相关分类查询。  </p>
<p>2.分类板块中点击精选经验时，展示的数据让人比较迷茫，即不是按照点赞数量来排序，也不是按照分享或者时间来排序，也不是按照浏览次数来排序，所以这个精选经验出来的数据感觉很奇怪，不知道何来”精选”，没有达到用户点击这个tab想要的目的。  </p>
<p>3.分类板块中点击最近热门时，我看到的是按照时间排序，符合”最近”这个标题，但是并不太符合”热门”这个标题，因为我看到的是浏览量同样的情况下，没有按照点赞进行排序，我认为最近热门应该是筛选最近某个时间内的数据，然后按照浏览量 + 点赞数 + 评论数 或者其他标签进行一个权值计算，得道一个最近热门顺序，当然核心点是能让用户感觉出越前面的数据确实越热门。  </p>
<p>4.分类板块中点击大家感兴趣，获取到的数据并没有按照评论数量排序，而且此处是否需要增加时间筛选，就是在一定时间内的大家最感兴趣的经验文章。</p>
</blockquote>
<h4 id="经验杂志"><a href="#经验杂志" class="headerlink" title="经验杂志"></a>经验杂志</h4><blockquote>
<p>这一个板块感觉真的蛮好的，简洁有用，能让用户快速连续的读到一些有关联的经验信息，但是杂志信息还是感觉有点老，首页banner和专栏那里显示的经验很多是很久以前的，这部分可能有待加强，需要想办法去促进用户多产出。</p>
</blockquote>
<h4 id="经验任务"><a href="#经验任务" class="headerlink" title="经验任务"></a>经验任务</h4><blockquote>
<p>1.打开小蓝本后点击相应的任务是打开新页面去做任务，但是在用做任务的过程中没有实时的能让用户看到正在进行的任务以及任务进度和下一个任务，并且用户做完任务后也不会马上看到自己做好的任务，需要刷新页面打开小蓝本才能看到，这一块我认为需要形成一个闭环，让用户在实时做任务的时候就能看到自己任务的进度，并且做完一个任务后弹框提示用户下一个任务，而在首页的用户信息板块那里也应该显示用户正在进行的任务，要实时展示用户最关心的任务并且形成一个闭环去引导用户。  </p>
<p>2.升级小蓝本(用户等级)较为复杂，而且有点类似打怪升级，但是对于知识类产品，用做任务升级的方式去引导用户和吸引用户，我认为这效果可能不太好（具体要看数据），对于发布悬赏和领取悬赏回答的用户来说，发布的悬赏能得到专业的回答和多一点用户不同的回答，最主要是能快速解决他的问题，是对用户最好的体验，对于回答者来说，得到求助者的认可和广大用户的认可，外加平台的奖励，是能鼓励用户继续回答的，所以应该造成一个正循环，发布者－回答者－其他用户鼓励－平台奖励，这才能更好的留存和拉新。</p>
</blockquote>
<h4 id="经验签到"><a href="#经验签到" class="headerlink" title="经验签到"></a>经验签到</h4><blockquote>
<p>1.不知道这个经验签到功能的数据怎么样，个人感觉对于知识类产品，最重要的是如何引导用户去回答以及引导用户有问题来这个平台问，还有就是引导其他用户有因为就会想到来百度经验搜索。</p>
</blockquote>
<h4 id="经验回享计划"><a href="#经验回享计划" class="headerlink" title="经验回享计划"></a>经验回享计划</h4><blockquote>
<p>1.这是一个鼓励原创内容和鼓励回答问题的一种方式，是一个比较好的功能。<br>2.这个功能是好的，但是感觉加入回享计划挺麻烦的，需要报名参加并且加入预备班，当然这样一定程度上可以保证经验的专业性，但是对于用户加入的门槛来说提高了，对于用户量的增长来说会有所影响，这个就需要根据这个功能的目标进行合理的规则制定了。</p>
</blockquote>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><blockquote>
<p>1.很多分类，进去的首页文章都是很老的，而且排名靠前的文章点赞少，浏览少，我觉得经验产品的目前的流量都是依靠搜索，没有自己形成流量入口，对于用户来说没有存在感，用完即走，走完即忘，当然可能经验这个产品本身就是提供一种解决问题的作用，不需要用户留下来，只需要用户用完即走就可以。  </p>
<p>2.每一篇经验下面是否应该直接显示相应的评论，而不是点击”有得”才显示评论，这样减少用户的二次操作并且可以看到其他用户对该篇经验的评价，强化社交属性，加强用户之间的讨论，用户的讨论能让文章本身更加火热和生动，比如网易新闻的评论，知乎评论都是不错的。</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>经验产品的出发点是解决问题，目前来说用户通过搜索引擎搜索问题后确实是能够进入经验并且解决自己的问题，但是经验产品本身对于运营/用户留存/用户互动 等还不够，有很多用户本身是通过搜索引擎进入经验解决问题的，但是他只认为这是通过百度得到的，并不知道自己用的就是百度经验，有点过于依靠搜索引擎了，没有强化自己的属性，没有在用户心中形成印象和口碑。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;h4 id=&quot;经验产品的定位&quot;&gt;&lt;a href=&quot;#经验产品的定位&quot; class=&quot;headerlink&quot; title=&quot;经验产品的定位&quot;&gt;&lt;/a&gt;经验产品的定位&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;百度经验是用户根据自己的实际经验分享出来解决某一个特定问题的平台。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;经验产品个人中心管理&quot;&gt;&lt;a href=&quot;#经验产品个人中心管理&quot; class=&quot;headerlink&quot; title=&quot;经验产品个人中心管理&quot;&gt;&lt;/a&gt;经验产品个人中心管理&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;1.个性签名限制字数为14字，字数太少，不方便写个性签名，不清楚这样限制的目的是为何，并且点击确认后实际上已经向后台发送了修改请求，但是前台的弹框没有消失掉，不做任何反应，造成修改失败的误解，体验有待优化。  &lt;/p&gt;
&lt;p&gt;2.对于 经验/关注/粉丝/我的关注/我的粉丝/我的疑问等tab点击切换，会重新加载页面，没有做js的无感之加载数据，体验有待优化。  &lt;/p&gt;
&lt;p&gt;3.高悬赏和低悬赏的区分，目前无高悬赏，这部分应该进行用户调研和数据观察，争取有高悬赏吸引回答者，低悬赏显示的价格和已领取进去之后显示的价格不一致，不知道怎么计算出来的，而且已悬赏进去之后会有多一点现金，红包以及财富值和经验奖励，这部分收入比较吸引人，应该在悬赏那一列就显示，更能吸引答主。  &lt;/p&gt;
&lt;p&gt;4.放弃回答问题的时候，不仅应该提示用户每天只有5次的放弃机会，还应该提示用户目前剩余几次的放弃机会，更加明朗，并且让用户实时的考虑当前这个问题是否要放弃。  &lt;/p&gt;
&lt;p&gt;5.同一个问题只能被一个人领取，并且领取后该问题就被锁定，其他人无法看到，这样感觉不太好，一个问题应该可以让多人回答，并且让提问用户选出哪个更有帮助。&lt;br&gt;
    
    </summary>
    
      <category term="生活杂谈" scheme="http://chenyangblog.com/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="随笔" scheme="http://chenyangblog.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>寻找和预测失踪孩童idea</title>
    <link href="http://chenyangblog.com/2016/12/11/%E5%AF%BB%E6%89%BE%E5%92%8C%E9%A2%84%E6%B5%8B%E5%A4%B1%E8%B8%AA%E5%AD%A9%E7%AB%A5idea.html"/>
    <id>http://chenyangblog.com/2016/12/11/寻找和预测失踪孩童idea.html</id>
    <published>2016-12-11T06:39:15.000Z</published>
    <updated>2016-12-11T06:39:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><hr><br><!--部分内容--><br><a id="more"></a><br><!--剩下内容--></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;hr&gt;&lt;br&gt;&lt;!--部分内容--&gt;&lt;br&gt;
    
    </summary>
    
      <category term="生活杂谈" scheme="http://chenyangblog.com/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"/>
    
      <category term="技术之美" scheme="http://chenyangblog.com/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/%E6%8A%80%E6%9C%AF%E4%B9%8B%E7%BE%8E/"/>
    
      <category term="产品之道" scheme="http://chenyangblog.com/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/%E6%8A%80%E6%9C%AF%E4%B9%8B%E7%BE%8E/%E4%BA%A7%E5%93%81%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="随笔" scheme="http://chenyangblog.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>众筹idea</title>
    <link href="http://chenyangblog.com/2016/12/11/%E4%BC%97%E7%AD%B9idea.html"/>
    <id>http://chenyangblog.com/2016/12/11/众筹idea.html</id>
    <published>2016-12-11T06:28:05.000Z</published>
    <updated>2017-02-04T12:12:57.000Z</updated>
    
    <content type="html"><![CDATA[<p><hr><br>关于众筹问题，是否能出这样一个app或者功能，<br>app内部每一个众筹不是直接让用户捐钱，<br>而是对应一个广告，让用户观看和点击来捐献自己的爱心，<br>可显示用户观看或者点击广告能带给众筹中多少钱，<br>然后企业通过这部分广告的收入分成作为众筹金额</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;hr&gt;&lt;br&gt;关于众筹问题，是否能出这样一个app或者功能，&lt;br&gt;app内部每一个众筹不是直接让用户捐钱，&lt;br&gt;而是对应一个广告，让用户观看和点击来捐献自己的爱心，&lt;br&gt;可显示用户观看或者点击广告能带给众筹中多少钱，&lt;br&gt;然后企业通过这部分广告的收入分成作为众筹金
    
    </summary>
    
      <category term="我的idea" scheme="http://chenyangblog.com/categories/%E6%88%91%E7%9A%84idea/"/>
    
    
      <category term="idea" scheme="http://chenyangblog.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>计数排序</title>
    <link href="http://chenyangblog.com/2016/12/01/%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F.html"/>
    <id>http://chenyangblog.com/2016/12/01/计数排序.html</id>
    <published>2016-12-01T09:41:07.000Z</published>
    <updated>2016-12-01T10:18:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><hr></p>
<h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><blockquote>
<p>主要是将值作为下标，然后计算有多少小于该值的数，然后再把相应的值放入到相应的位置，如果有相同的值则最先扫描到的放到可能的最后的位置。<br><a id="more"></a><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 999999999</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">10000</span>;</div><div class="line"><span class="keyword">int</span> len, arr[MAX];</div><div class="line"><span class="keyword">int</span> mark[MAX], temp[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"--------------------"</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">' '</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"------------------\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">calSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; MAX; ++i) mark[i] = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) mark[arr[i]] += <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; MAX; ++i) mark[i] += mark[i<span class="number">-1</span>];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) temp[--mark[arr[i]]] = arr[i];</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) arr[i] = temp[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; len;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; arr[i];</div><div class="line">    &#125;</div><div class="line">    calSort(arr, len);</div><div class="line">    output(arr, len);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;h3 id=&quot;计数排序&quot;&gt;&lt;a href=&quot;#计数排序&quot; class=&quot;headerlink&quot; title=&quot;计数排序&quot;&gt;&lt;/a&gt;计数排序&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;主要是将值作为下标，然后计算有多少小于该值的数，然后再把相应的值放入到相应的位置，如果有相同的值则最先扫描到的放到可能的最后的位置。&lt;br&gt;
    
    </summary>
    
      <category term="技术之美" scheme="http://chenyangblog.com/categories/%E6%8A%80%E6%9C%AF%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="技术" scheme="http://chenyangblog.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>快速排序详解</title>
    <link href="http://chenyangblog.com/2016/12/01/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E8%AF%A6%E8%A7%A3.html"/>
    <id>http://chenyangblog.com/2016/12/01/快速排序详解.html</id>
    <published>2016-12-01T07:11:50.000Z</published>
    <updated>2016-12-01T07:20:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><hr><br><a id="more"></a></p>
<h3 id="图解过程"><a href="#图解过程" class="headerlink" title="图解过程"></a>图解过程</h3><p><img src="http://blog-images01.oss-cn-hangzhou.aliyuncs.com/IMG_20161201_143303.jpg" alt="流程图"></p>
<blockquote>
<p><strong>对于数组s = [2, 1, 3, 0, 4, 5, 8, 7, 1]进行排序</strong></p>
<ul>
<li>将s[0]取出作为比较值val，则s[0]位置空出</li>
<li>第一步，从数组右边扫描，查询第一个比val小的, 如图1查询到s[8]</li>
<li>将s[8]放入上一步的空格中，则s[8]空出来，如图2</li>
<li>第二步，从数组左边扫描，查询第一个比val大的，如图2查询到s[2]</li>
<li>将s[2]放入上一步的空格中，则s[2]空出来，如图3</li>
<li>第三步，从数组右边扫描，查询第一个比val小的，如图3查询到s[3]</li>
<li>将s[3]放入上一步的空格中，则s[3]空出来，如图4</li>
<li>++left …</li>
<li>–right …</li>
<li>直到left &gt;= right，结束扫描，将val放入s[left]，如图5</li>
<li>然后数组被分为0~left - 1, left + 1 ~ n继续递归排序<br>最好的情况是val每一次取到中间值，则复杂度为nlog(n)<br>最坏的情况是val每一次取到最小值或者最大值，则复杂度为n^2</li>
</ul>
</blockquote>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 999999999</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">10000</span>;</div><div class="line"><span class="keyword">int</span> len, arr[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n------\n"</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">' '</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n------\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> st, <span class="keyword">int</span> end)</span> </span>&#123; <span class="comment">// 升序排序</span></div><div class="line">    <span class="keyword">if</span>(st &gt;= end) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">int</span> left = st, right = end;</div><div class="line">    <span class="keyword">int</span> val = arr[right]; <span class="comment">// 从左边开始寻找合适的数去填充右边的位置</span></div><div class="line">    <span class="keyword">while</span>(left &lt; right) &#123; <span class="comment">// 如果每次left = right = (right + left) / 2则算法复杂度为nlog(n)，如果每次left = right = st或者end则复杂度为n*n</span></div><div class="line">        <span class="keyword">while</span>(left &lt; right &amp;&amp; arr[left] &lt; val) ++left;</div><div class="line">        arr[right] = arr[left]; <span class="comment">// 左边的数填充了右边的位置，则需要从右边寻找合适的数去填充这个空出的位置</span></div><div class="line">        <span class="keyword">while</span>(left &lt; right &amp;&amp; arr[right] &gt;= val) --right;</div><div class="line">        arr[left] = arr[right];</div><div class="line">    &#125;</div><div class="line">    arr[left] = val; <span class="comment">// 最终剩下一个位置用来填充val，则val左边的比val小，val右边的比val大</span></div><div class="line">    quickSort(arr, st, left - <span class="number">1</span>);</div><div class="line">    quickSort(arr, left + <span class="number">1</span>, end);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; len) &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</div><div class="line">            <span class="built_in">cin</span> &gt;&gt; arr[i];</div><div class="line">        &#125;</div><div class="line">        quickSort(arr, <span class="number">0</span>, len <span class="number">-1</span>);</div><div class="line">        output(arr, len);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;hr&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术之美" scheme="http://chenyangblog.com/categories/%E6%8A%80%E6%9C%AF%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="技术" scheme="http://chenyangblog.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>堆排序之详解</title>
    <link href="http://chenyangblog.com/2016/12/01/%E5%A0%86%E6%8E%92%E5%BA%8F%E4%B9%8B%E8%AF%A6%E8%A7%A3.html"/>
    <id>http://chenyangblog.com/2016/12/01/堆排序之详解.html</id>
    <published>2016-12-01T04:44:53.000Z</published>
    <updated>2016-12-01T04:47:13.000Z</updated>
    
    <content type="html"><![CDATA[<p><hr></p>
<h3 id="基础排序之选择排序"><a href="#基础排序之选择排序" class="headerlink" title="基础排序之选择排序"></a>基础排序之选择排序</h3><blockquote>
<p>对于数组s = [2, 1, 3, 0, 4, 5, 8, 7, 6]进行升序排序</p>
</blockquote>
<p>基本思路是: 双重for循环，每次选择最大的和最后一位数进行位置互换<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = len(s) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</div><div class="line">    <span class="keyword">int</span> k = i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</div><div class="line">        <span class="keyword">if</span>(s[k] &lt; s[j]) k = j;</div><div class="line">    &#125;</div><div class="line">    swap(s[k], s[i])</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面大概就是选择排序的核心代码了，复杂度为O(n^2)</p>
<a id="more"></a>
<h3 id="选择排序之树形表示法"><a href="#选择排序之树形表示法" class="headerlink" title="选择排序之树形表示法"></a>选择排序之树形表示法</h3><p><img src="http://blog-images01.oss-cn-hangzhou.aliyuncs.com/IMG_20161201_114843.jpg" alt="树形表示数组"><br>同样用选择排序的思想进行选择最大的数并和最后一位数进行位置互换</p>
<blockquote>
<p>但是和普通选择排序的区别在于：<br>扫描数组进行比较时不以线性扫描，而是以树形方式扫描</p>
</blockquote>
<p>具体如下:</p>
<blockquote>
<ul>
<li>s[7], s[8], <code>s[3]</code>比较选出最大的作为s[k]</li>
<li>s[3], s[4], <code>s[1]</code>, s[k]比较选出最大的作为s[k]</li>
<li>s[5], s[6], <code>s[2]</code>, s[k]比较选出最大的作为s[k]</li>
<li>s[1], s[2], <code>s[0]</code>, s[k]比较选出最大的作为s[k]</li>
<li>s[k]和最后一位数进行位置互换</li>
</ul>
</blockquote>
<p>以树形方式扫描整个数组关键在于扫描到所有非叶子<code>节点i</code>，则该节点的两个子节点为<code>2 * i +1</code>, <code>2 * i + 2</code>, 可是扫描所有非叶子节点的复杂度为O(n)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = len(s) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</div><div class="line">    k = i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = i / <span class="number">2</span>; j &gt;= <span class="number">0</span>; --j) &#123; <span class="comment">// i/2表示最后一个非叶子节点</span></div><div class="line">        <span class="keyword">if</span>(j * <span class="number">2</span> +<span class="number">1</span> &gt; i) <span class="keyword">continue</span>; <span class="comment">// 表示叶子节点，则继续寻找非叶子节点</span></div><div class="line">        <span class="keyword">if</span>(s[k] &lt; s[j * <span class="number">2</span> + <span class="number">1</span>]) k = j * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line">        <span class="keyword">if</span>(j * <span class="number">2</span> + <span class="number">2</span> &lt;= i &amp;&amp; s[k] &lt; s[j * <span class="number">2</span> + <span class="number">2</span>]) k = j * <span class="number">2</span> + <span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    swap(s[k], s[i])</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上述就是以树形方式进行选择排序，可是每次查询最大值时都要扫描整颗树，和普通选择排序并没有什么区别。</p>
<blockquote>
<p>然而如果能在扫描树的时候把<code>i</code>, <code>i * 2 + 1</code>, <code>i * 2 + 2</code>的最大值保存在i节点上，则进行下一次查询的时候查询以i为根节点的树的最大值的时候就是s[i], 然后将s[i]和最后一位数进行替换，然后去更新<code>s[i]</code>, <code>s[i * 2 + 1]</code>, <code>s[i * 2 + 2]</code>保证s[i]为以i为根结点的最大值, <code>s[i * 2 + 1]</code>为以i * 2 + 1为根节点的最大值…</p>
</blockquote>
<h3 id="选择排序变形之堆排序"><a href="#选择排序变形之堆排序" class="headerlink" title="选择排序变形之堆排序"></a>选择排序变形之堆排序</h3><p>具体如下：</p>
<blockquote>
<p><strong>初始化树，保证每个节点是以该节点为根的树的最大值</strong></p>
<ul>
<li>s[7], s[8], s[3]比较选出最大的和s[3]互换, 去更新和s[3]互换的子树</li>
<li>s[3], s[4], s[1]比较选出最大的和s[1]互换，去更新和s[1]互换的子树</li>
<li>s[5], s[6], s[2]比较选出最大的和s[2]互换，去更新和s[2]互换的子树</li>
<li>s[1], s[2], s[0]比较选出最大的和s[0]互换，去更新和s[0]互换的子树</li>
</ul>
<p><strong>将s[0]和最后一位树进行互换，并更新以s[0]为根的树</strong></p>
</blockquote>
<p>代码如下<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 999999999</span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">10000</span>;</div><div class="line"><span class="keyword">int</span> len, arr[MAX];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapAdjust</span> <span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> st, <span class="keyword">int</span> end)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> tmp;</div><div class="line">    <span class="keyword">while</span>(st * <span class="number">2</span> + <span class="number">1</span> &lt;= end) &#123; <span class="comment">// 更新最大堆，进行升序排序, 本次循环最坏情况log(end-st)次</span></div><div class="line">        tmp = st;</div><div class="line">        <span class="keyword">if</span>(arr[tmp] &lt; arr[st * <span class="number">2</span> + <span class="number">1</span>]) &#123;</div><div class="line">            tmp = st * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(st * <span class="number">2</span> + <span class="number">2</span> &lt;= end &amp;&amp; arr[tmp] &lt; arr[st * <span class="number">2</span> + <span class="number">2</span>]) &#123;</div><div class="line">            tmp = st * <span class="number">2</span> + <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(st == tmp) &#123; <span class="comment">// 不需要交换节点，则无需更新该节点下的子堆</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        arr[st] = arr[st] ^ arr[tmp];</div><div class="line">        arr[tmp] = arr[st] ^ arr[tmp];</div><div class="line">        arr[st] = arr[st] ^ arr[tmp];</div><div class="line">        st = tmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> len)</span> </span>&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"--------------------"</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">' '</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"------------------\n"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> len)</span> </span>&#123; <span class="comment">// 复杂度nlog(n)</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123; <span class="comment">// 建立堆，从最后一个非叶子节点开始建立, (2 * k + 1)或者(2 * k + 2) = n =&gt; 最后一个非叶子节点k = n/ 2 - 1</span></div><div class="line">        heapAdjust(arr, i, len - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; --i) &#123; <span class="comment">// 筛选和更新堆, 本次循环n次</span></div><div class="line">        heapAdjust(arr, <span class="number">0</span>, i);</div><div class="line">        arr[<span class="number">0</span>] = arr[<span class="number">0</span>] ^ arr[i];</div><div class="line">        arr[i] = arr[<span class="number">0</span>] ^ arr[i];</div><div class="line">        arr[<span class="number">0</span>] = arr[<span class="number">0</span>] ^ arr[i];</div><div class="line">        <span class="comment">// output(arr, len);</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">cin</span> &gt;&gt; len;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; arr[i];</div><div class="line">    &#125;</div><div class="line">    heapSort(arr, len);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="string">' '</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;h3 id=&quot;基础排序之选择排序&quot;&gt;&lt;a href=&quot;#基础排序之选择排序&quot; class=&quot;headerlink&quot; title=&quot;基础排序之选择排序&quot;&gt;&lt;/a&gt;基础排序之选择排序&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;对于数组s = [2, 1, 3, 0, 4, 5, 8, 7, 6]进行升序排序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基本思路是: 双重for循环，每次选择最大的和最后一位数进行位置互换&lt;br&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = len(s) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; --i) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = i;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = i - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; --j) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(s[k] &amp;lt; s[j]) k = j;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    swap(s[k], s[i])&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面大概就是选择排序的核心代码了，复杂度为O(n^2)&lt;/p&gt;
    
    </summary>
    
      <category term="技术之美" scheme="http://chenyangblog.com/categories/%E6%8A%80%E6%9C%AF%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="技术" scheme="http://chenyangblog.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>idea职场社交</title>
    <link href="http://chenyangblog.com/2016/06/20/idea%E8%81%8C%E5%9C%BA%E7%A4%BE%E4%BA%A4.html"/>
    <id>http://chenyangblog.com/2016/06/20/idea职场社交.html</id>
    <published>2016-06-20T08:09:38.000Z</published>
    <updated>2016-06-23T15:47:45.000Z</updated>
    
    <content type="html"><![CDATA[<p><hr><br>前天和某个前辈聊关于职场社交，被问到如何建立一个network并且可以从微信中将流量偷出来，昨日正巧下载体验了下钉钉，感觉钉钉好像就是在做这个事，所以有以下想法：</p>
<blockquote>
<p>1.从社交粘性上来说熟人社交粘性大，还有就是企业社交，比如邮件，从关系的聚集上来说也是熟人之间和企业员工容易聚集关系形成network<br><a id="more"></a><br>2.从目前的社交方式来说都是主打个人社交然后在走向群体社交，如微信这样的就是1对1的聊天为主，群聊为辅，这种方式是适合熟人或者陌生人社交，而对于企业社交目前以邮件为主，企业中都是以邮件形式传递消息再辅助于微信群进行沟通交流，对于企业社交是以团体社交为主，那么是不是可以改变企业中以邮件为主的社交方式，把邮件和微信中群聊天结合起来，将两者的流量偷出来。</p>
</blockquote>
<p><strong>所以我想是不是可以从企业社交演化成职场社交，以团体社交为主再辅助于个人社交，具体的功能设计有如下：</strong></p>
<blockquote>
<p>1.更加类型分明的群，目前微信这种社交软件都是简单的把人聚集在一起形成一个群，而如果做职场社交（从企业出发）可以设计适合企业的群：<br>如：</p>
<ul>
<li>功能1：企业中有新员工加入，则将该员工加入群并绑定邮箱，如果有员工离职则管理员可标记该员工离职，则该员工将会在1天之后被请出所有与该企业相关的群，包括商务合作群，而该员工也将会在当前被通知1天后将要退出的群，而相关群的群主也将被通知XX将会在1天后退出群，并且企业邮箱管理者将收到邮件某人离职，这样的一件解除员工和企业的关系，简洁方便安全高效。<br><br></li>
<li>功能2：在企业群中可通过@相应的人然后发消息和文件，消息只有这些被@的人看得见，文件自动传输到相应的人的邮箱，这样更快速的与公司的人员交流，不必先互相加为好友然后再联系，更加方便快速。<br><br></li>
<li>功能3：可在企业群中选择相应的人员建立二级群，聊天时可进入企业群众然后选择相应的二级群，则聊天只有这些人可见，这样做的目的是因为目前如果在微信中我需要拉企业中某些人临时组成群交流，需要把所有人都加为好友，而直接通过企业群在企业群中建立二级群则更加方便快速，并且二级群所属企业/群属性更加的鲜明。<br><br></li>
<li>功能4：对于企业群或者二级群等发消息或者文件，可选择是否群发邮件，消息(包括发送文件到邮箱的消息)会直接在手机上就进行通知，消息的到达率和查看率会更高，减少企业中交流的成本。<br><br></li>
<li>功能5：企业与企业之间的联系可通过商务合作建立联系，每个企业有自己的商务群并且需要被认证，则商务群中的用户可搜索到其他企业的商务合作群并且可申请合作入群，然后可在群中发送名片以及展示个人信息进行交流合作，另外可在商务群中建立二级群，每个用户只能看到包含自己的二级群，这样商务交流更加方便，商务群的管理也更加的方便和清晰。</li>
</ul>
<hr>
<p>2.由企业群发展到其他的团体群，比如学生群，活动群，这种群内可支持一件发送短信和拨打群成员的电话，这样可将消息更加实时的通知到成员以及寻找成员时更加方便，不过要有所限制防止骚扰</p>
<hr>
<p>3.由团体交流发展再辅助于个人交流，允许群成员互相加为好友或者允许用户加其他人为好友进行交流</p>
<hr>
<p>4.微信有朋友圈去增强熟人的交流和用户体验，而在职场社交上，可以将群与资讯进行结合，所以可以有资讯这一个功能，资讯里面是行业最新信息以及话题的交流：<br>如：</p>
<ul>
<li>功能1：资讯板块并不是做成新闻一样，而是简短的概述核心消息，这样子资讯的门槛低，每个人都可以总结发布，鼓励每个用户发布资讯，资讯需要选择行业标签，每天每个行业的访问量前10名的资讯如果达到1万访问量则给资讯作者奖励10元，10万奖励10元，100万奖励100元，…，鼓励用户发布资讯，这样可最快速更新行业最新资讯，减少公司人力成本，不过前期可能需要公司自己收集发布。<br><br></li>
<li>功能2：资讯板块分为3个tab，一个tab是行业人员的分享以及文章（资讯）发布，第二个tab是匿名吐槽功能，可对公司行业以及其他人将心中的不爽尽情吐槽发泄但是不想让别人看到自己，第三个是根据用户的标签匹配附近群和活动以及其他人的动态和足迹，如果是陌生人可直接聊天，但是有所限制，比如一开始只能通过表情打招呼，加为好友可解锁其他聊天方式，主要是为了打入户外活动和陌生人聊天，但是又要避免大家被骚扰。<br><br></li>
<li>功能3：首先由于知道每个人的职业以及行业，所以行业资讯板块里面展示最新行业资讯以及最火的话题讨论，可围观可发表意见。<br><br></li>
<li>功能4：话题或者行业信息可分享到群内，然后群内可进行讨论和扩散，将职场信息与群联动。</li>
</ul>
<hr>
<p>5.群类型扩展到生活中的户外活动群，俱乐部等，则加入这些群或者关注的标签中有户外活动和俱乐部时则还可以在资讯中展示热门活动和附近的活动，可加入活动并进入群，活动的发布是将活动群以及群信息分享公布出去</p>
</blockquote>
<p>以上是我认为的职场社交一个出发点：主要改变企业社交方式，将邮件与传统群聊结合起来，更个性化不同团体群特别是企业群，从企业社交发展到职场社交，由团体社交为主再辅助于个人社交，同时将单纯的职场社交扩展到团体社交，企业团体，学生团体，户外活动团体等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;hr&gt;&lt;br&gt;前天和某个前辈聊关于职场社交，被问到如何建立一个network并且可以从微信中将流量偷出来，昨日正巧下载体验了下钉钉，感觉钉钉好像就是在做这个事，所以有以下想法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.从社交粘性上来说熟人社交粘性大，还有就是企业社交，比如邮件，从关系的聚集上来说也是熟人之间和企业员工容易聚集关系形成network&lt;br&gt;
    
    </summary>
    
      <category term="我的idea" scheme="http://chenyangblog.com/categories/%E6%88%91%E7%9A%84idea/"/>
    
    
      <category term="idea" scheme="http://chenyangblog.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>产品分析之社交产品</title>
    <link href="http://chenyangblog.com/2016/06/09/%E4%BA%A7%E5%93%81%E5%88%86%E6%9E%90%E4%B9%8B%E7%A4%BE%E4%BA%A4%E4%BA%A7%E5%93%81.html"/>
    <id>http://chenyangblog.com/2016/06/09/产品分析之社交产品.html</id>
    <published>2016-06-08T17:50:39.000Z</published>
    <updated>2016-06-12T10:32:55.000Z</updated>
    
    <content type="html"><![CDATA[<p><hr><br>看-》想-》写，这是一个重要的过程，以前只看过产品分析，也有想过产品分析，这是第一次写产品分析，分析的内容和方法肯定是有待提高的，希望自己能坚持产品分析并完善吧。<br>最爱社交产品，所以这次拿几个社交产品开始我的第一次产品分析:</p>
<blockquote>
<p>微信–熟人社交<br>陌陌–基于LBS的陌生人社交<br>比邻–电话社交<br>探探–有限制的陌生人社交</p>
</blockquote>
<a id="more"></a>
<h4 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h4><p><hr><br><strong>1.微信的来源</strong></p>
<blockquote>
<p>微信是腾讯公司于2011年1月21日推出的一个为智能终端提供即时通讯服务的免费应用程序，微信支持跨通信运营商、跨操作系统平台通过网络快速发送免费（需消耗少量网络流量）语音短信、视频、图片和文字，同时，也可以使用通过共享流媒体内容的资料和基于位置的社交插件“摇一摇”、“漂流瓶”、“朋友圈”、”公众平台“、”语音记事本“等服务插件。</p>
</blockquote>
<p><strong>2.微信的定位</strong></p>
<blockquote>
<p>微信目前主要用于智能移动平台，定位于通信，熟人社交，目前添加好友的方式有：<br><code>1.通过qq号添加</code><br><code>2.通过手机联系人添加</code><br><code>3.通过雷达添加身边朋友</code><br><code>4.扫一扫二维码添加</code><br><code>5.通过微信号添加</code><br>这几种方式都属于熟人之间的社交，只有认识或者在身边然后通过主动添加的方式才可以成为好友</p>
<p>后来添加了几种陌生人社交的方式，但是并不允许直接添加为好友，而是需要先打招呼，聊天，然后彼此成为相对的“熟人”并且互相同意之后才可以添加为好友:<br><code>1.摇一摇</code><br><code>2.附近的人</code><br><code>3.漂流瓶</code><br>这几种方式属于陌生人社交，用户并不知道对方是谁</p>
<p>那么分析这几种添加好友的方式，可以得出一下结论：<br><code>1.微信希望联动手机好友，qq好友，身边的好友，足够满足你添加熟人的方式，希望建立一个熟人社交圈</code><br><code>2.微信给了几个陌生人社交的入口，不拒绝用户进行陌生人社交，但是想彼此成为好友则需要互相认同，成为相对的“熟人”</code></p>
</blockquote>
<p><strong>3.微信的用户群体</strong></p>
<blockquote>
<p>借用几张网上的微信数据图进行分析:<br><img src="http://blog-images01.oss-cn-hangzhou.aliyuncs.com/QQ20160607-0.png" style="width: 49%; float:left;"><br><img src="http://blog-images01.oss-cn-hangzhou.aliyuncs.com/QQ20160607-1.png" style="width: 49%; margin-top: -23px; float:right;"><br><img src="http://blog-images01.oss-cn-hangzhou.aliyuncs.com/QQ20160607-2.png" style="width: 49%; margin-top: 17px; margin-left: 30%"><br>从上图数据中分析得出如下结论:<br><code>1.微信的用户群体中性别主要以男生为主，但是女性用户也并不少，男女比例约为1.8 : 1。</code><br><code>2.微信的用户群体非常年轻，近一半用户年龄低于26岁，而有九成的用户年龄低于36岁，所以18-35岁的中青年为微信的主要用户群体，他们的比例高达86.2%。</code><br><code>3.微信的用户群体中企业职员居多，达到四成，而这部分用户的收入相对稳定，消费能力较好，所以微信可以挖掘这部分用户的消费潜力。</code></p>
</blockquote>
<p><strong>4.微信的功能</strong></p>
<blockquote>
<p>1.可进行语音，文字，表情，图片，视频等聊天消息的发送，满足用户对多种多样消息发送方式的需求。<br>2.可在聊天中发送红包，这是一种新奇的社交方式，将传统红包搬移到互联网中，而且令红包的发送是那么的轻松方便。<br>3.朋友圈，将自己的生活以及自己喜欢的东西分享给朋友们，增加朋友之间的了解和友情。<br>4.摇一摇、查看附近的人、漂流瓶，带给用户的几种新颖又有趣的陌生人社交方式。<br>5.扫一扫，支持普通的二维码/条码扫描，支持封面，街景以及单词翻译的扫描。<br>6.钱包，管理用户的零钱以及涵盖各种生活服务。<br>7.卡券，含有用户的各种优惠券以及会员卡。<br>8.游戏，含有腾讯推荐的游戏。<br>9.表情，可以在这里下载各种有趣好玩的表情。</p>
</blockquote>
<p><strong>5.微信的使用场景</strong></p>
<blockquote>
<p>1.工作中，微信在工作中使用已经很常见了，特别是一些工作群。<br>2.无聊想聊天的时候，微信是熟人社交，想找朋友聊天的时候微信是一个很好的平台，微信又有摇一摇，附近的人等陌生人社交。<br>3.需要阅读查看时，微信中的订阅号和公众号已经很多，大家都会关注一下自己喜欢的，当有新文章时即可查看。<br>4.支付，微信支付已经很成熟了，不管是发红包还是转账，以及线下支付等都可以用微信支付。<br>5.电商，在微信中开店做生意或者成为微商。</p>
</blockquote>
<p><strong>6.微信的体验</strong></p>
<blockquote>
<p>1.聊天体验，微信支持语音，视频，文字，表情以及群聊等，聊天方式丰富，聊天界面流畅简洁，表情图丰富有趣还可以添加和收藏，微信将聊天列表放在第一屏，主打聊天，体验很好，消息的收发速度很快。<br>2.交易支付，微信的支付结合了社交，不仅仅有普通的转账交易和线下支付交易，还可以在聊天过程中发送红包，把传统法的红包互联网和娱乐化了，将红包的发放更加简单有趣。<br>3.附近的人，摇一摇，漂流瓶，附近的人基于lbs的社交，即时是陌生人，但也知道就在周围，带给陌生人社交更好的体验和动力，摇一摇通过两个同时摇动手机的人进行匹配，带给用户一种新颖有趣的社交方式，漂流瓶让用户捡别人扔出的瓶子或者自己扔出瓶子进行社交，更加方便的社交方式。<br>4.朋友圈，类似于qq空间，将自己的生活和爱好分享给朋友，但是又不同于qq空间，更加的强调朋友之间的关系和生活分享，朋友圈主推图片式分享，给用户的分享主要入口是需要图片的，而文字的分享则更隐秘些，需要长按，朋友圈更加强调朋友之间的关系，只要互相是朋友时才能看到彼此的评论，而如果互相是朋友也会收到互相评论某某或者点赞某某的消息。</p>
</blockquote>
<p><strong>7.微信的商业化</strong></p>
<blockquote>
<p>微信的商业化目前来说不是特别的多和明显，主要有以下几种:<br>1.表情商店，通过出售多种多样的表情获取收入。<br>2.转账手续费，用户将微信零钱转账至银行卡时收取的手续费。<br>3.朋友圈，将朋友圈的大流量进行变现，通过大数据对用户进行广告的精准投放从而达到商业化。</p>
</blockquote>
<p><strong>8.总结</strong></p>
<blockquote>
<p>微信已经渐渐的深入了大家的生活，不仅提供了方便快速的聊天功能，还有线上转账支付以及线下的支付，成为了一个方便大家生活的工具，而微信的数据也表明微信不仅仅是年轻人用，老一辈的也会用，真正降低了沟通的成本，微信的口号是连接一切，非常期待微信做到这一步。</p>
</blockquote>
<h4 id="陌陌"><a href="#陌陌" class="headerlink" title="陌陌"></a>陌陌</h4><p><hr><br><strong>1.陌陌的来源</strong></p>
<blockquote>
<p>陌陌成立于于2011年3月，是一款基于地理位置的移动社交工具。使用者可以通过陌陌认识附近的人，免费发送文字消息、语音、照片以及精准的地理位置和身边的人更好的交流；可以使用陌陌创建和加入附近的兴趣小组、留言及附近活动和陌陌吧。</p>
</blockquote>
<p><strong>2.陌陌的定位</strong></p>
<blockquote>
<p>陌陌目前主要用于智能移动平台，定位于陌生人社交，主要添加好友方式有：<br><code>1.可直接添加自己看到的陌生人，比如附近的人</code><br><code>2.通过搜索陌陌号进行添加</code><br><code>3.添加通讯录好友</code><br><code>4.添加qq和微信好友</code><br>以上这几种为陌陌添加好友的方式，其中2，3，4的添加方式属于添加自己的熟人，其中添加qq和微信是通过邀请用户的方式进行添加好友，这几种熟人添加方式并不是陌陌的主要渠道，并且邀请式的添加好友并不及时有效，而陌陌区别于微信的最大之处就是在于陌陌强调陌生人社交，不仅第一界面是附近的陌生人，陌生人动态，陌生群组等，而且附近的陌生人显示的距离精确到米和在线的时间也是实时显示的，用户可直接和陌生人进行聊天，相互关注即可成为好友。</p>
</blockquote>
<p><strong>3.陌陌的用户群体</strong></p>
<blockquote>
<p>陌陌的用户多以年轻人为主，其中又以白领和学生居多，多数人冲着约炮神器慕名而来，其中男性居多，并且普遍寂寞，对两性交友感兴趣。</p>
</blockquote>
<p><strong>4.陌陌的功能</strong></p>
<blockquote>
<p>1.查看附近的人，动态，群组，陌陌的主打功能，显示给用户附近的人以及出现的时间，用户可直接进行打招呼聊天，而为了增加陌生人之间的话题，即时是陌生人，也可以互相看到对方的信息，比如有限的动态，签名，个人信息，爱好以及常出没地等，用户也可以直接查看附近的人发送的动态并且直接打招呼聊天，也可以加入附近的群组，和群内成员进行线上聊天和线下活动等。<br>2.筛选附近的人，用户可设置一定的条件，比如性别，活跃时间，年龄，星座等来筛选出现在自己附近的人，从而让用户更方便的寻找到自己想要聊天的陌生人。<br>3.直播，用户可观看正在进行的直播，还能观看自己附近的直播。<br>4.动态，用户可分享自己的动态和观看好友的动态，用户还可观看陌生人的动态。<br>5.圈子，圈子类似社区，聚集有共同特征的人，可进行看帖，发帖和回帖。<br>6.聊天室，以莫一主题建立一个临时群组，可进去聊天和围观别人聊天。<br>7.会员中心，表情商店，用户可购买会员获得更多的体验。</p>
</blockquote>
<p><strong>5.陌陌的使用场景</strong></p>
<blockquote>
<p>1.作为一款主打陌生人聊天的工具，陌陌可以在你想找人聊天时都可使用。<br>2.陌陌的群组以及群活动也是非常丰富的，在周末无聊的时候可以参加陌陌群组组织的活动。</p>
</blockquote>
<p><strong>6.陌陌的体验</strong></p>
<blockquote>
<p>1.寻找陌生人体验，陌陌的第一界面就是附近的陌生人，并且可以看到陌生人的头像以及上传的图片，还可以看到用户的动态以及爱好，是否单身，职业和个人信息等众多的信息，对于用户来说是很好的体验，可以快速的找到和陌生人之间的共同话题。<br>2.聊天体验，陌陌生的聊天功能是非常丰富的，支持文字，语音，视频，发送定位，红包，群聊，分享音乐以及阅后即焚等众多的聊天功能，给用户完善的聊天体验，对于陌陌独有的阅后即焚则增加了用户聊天的私密性，另外陌陌的聊天界面还显示用户之间的距离，以及消息是否被送达和阅读，可以实时感觉到对方是否对你有兴趣，是否阅读了你的消息，减少用户等待聊天的时间，减少了陌生人聊天的成本。<br>3.直播体验，用户在陌陌里面选择直播间时不仅可以查看最新的以及通过排行榜进行查看，还可以查看自己的附近的直播，给用户更加真实的感觉，用户在退出直播间之后，直播会以小屏形式显示在用户手机上，用户可以边看直播边进行其他的活动。<br>4.圈子体验，圈子里面可以发帖回帖以及看帖，方便迅速的查看用户感兴趣的东西和发帖寻求自己想要的东西。<br>5.点点体验，点点里面主要是推荐附近的人，用户可选择喜欢还是不喜欢，只有双方互相喜欢之后才可以聊天，减少了用户的被骚扰。</p>
</blockquote>
<p><strong>7.陌陌的商业化</strong></p>
<blockquote>
<p>1.会员表情增值服务，陌陌有会员服务和表情上店，用户想要获得更好的聊天或者查看用户信息的体验可以通过购买会员和表情。<br>2.游戏联运，陌陌以自己的用户数为基础，和第三方游戏方进行合作获取收益。<br>3.接入第三方api，陌陌通过合作接入第三方api和服务以便商业化。<br>4.广告推广，陌陌接入广告或者商家在附近的人和动态里面进行推广以便商业化。</p>
</blockquote>
<p><strong>8.总结</strong></p>
<blockquote>
<p>陌陌从上线到上市，发展迅速，作为国内最成功的陌生人社交软件，陌陌以陌生人作为入口和主打功能显然是成功了，但是俗话说成业风云败也风云，陌陌既然在陌生人社交这里成功了，可不能在这里跌倒，而陌陌中现在出现的很多问题就是大多数人以约炮的目的进行社交，带给太多用户骚扰，特别是女性用户，所以陌陌需要做的是如何减少用户的被骚扰以及增强用户的聊天质量，为此陌陌有星级评分，拉名单，以及最新出的点点其实都是减少用户的骚扰，带给用户更好的聊天体验，愿陌陌越来越好。</p>
</blockquote>
<h4 id="比邻"><a href="#比邻" class="headerlink" title="比邻"></a>比邻</h4><p><hr><br><strong>1.比邻的来源</strong></p>
<blockquote>
<p>比邻于2013年5月上线，主打电话社交，是一个刺激年轻人心跳的社交工具。主要通过即时通话，随时畅聊你感兴趣的话题，并且可以通过精彩的图片和文字分享生活中的美好点滴，也可以欣赏其它用户个性十足的个人资料和生活相册。通过比邻可以以最直接的打电话形式结识来自天涯海角却与你有共同话题的新朋友，还可以免费发送可爱的动态表情短信联络好友，是一款时尚、刺激的社交APP。</p>
</blockquote>
<p><strong>2.比邻的定位</strong></p>
<blockquote>
<p>比邻定位于陌生人电话社交，可通过比邻号进行好友的查询和添加，也可以通过互相关注而成为好友。</p>
</blockquote>
<p><strong>3.比邻的用户群体</strong></p>
<blockquote>
<p>比邻的用户群体主要是上班族或者学生，在业余时间的时候进行陌生人聊天。</p>
</blockquote>
<p><strong>4.比邻的功能</strong></p>
<blockquote>
<p>1.查看同城在线，用户可设置一定的筛选条件进行同城用户筛选。<br>2.随机电话，用户可进入随机电话选择1对1随机单聊或者随机群聊。<br>3.聊天，用户和陌生人可进行文字，图片或者电话聊天。<br>4.直播，可观看直播，直播分为视频直播可语音直播。</p>
</blockquote>
<p><strong>5.比邻的使用场景</strong></p>
<blockquote>
<p>1.在业余时间下，用户想追求更加刺激的聊天时可使用比邻的电话聊天。<br>2.用户想和同城异性聊天时可使用比邻的同城功能。<br>3.用户想进行午间夜话这种语音聊天或者想看直播时可使用比邻。</p>
</blockquote>
<p><strong>6.比邻的体验</strong></p>
<blockquote>
<p>1.陌生人打招呼体验，和陌陌相同的是可以和陌生人打招呼，并且主界面显示的就是同城用户，增加了陌生人的真实性和拉近的彼此的距离，同样也可以查看陌生人的个人信息以及动态等，但是不同于陌陌的是打招呼不能过快，快速的打招呼是被禁止的，每次和陌生人打完招呼都需要稍等一会才能和下一个人打招呼，这样其实能更好的减少用户的被骚扰性和降低用户去骚扰别人。<br>2.聊天体验，和陌生人进行聊天时只能文字或者表情图片，不能语音但是可以申请电话聊天，因为比邻主打电话聊天，并且电话聊天更加的刺激和真实，另外如果双方互为陌生人，那么每天的聊天次数是有限制的，这点体验其实很差，比邻在和陌生人聊天次数被限制之前没任何的通知，忽然间就不能回对方信息了，导致双方可能交流的挺愉快的但是突然就没消息了，而且也不能回消息叫对方关注自己，所以这点需要改进。<br>3.随机电话体验，用户可选择进行群聊，进入群聊会有房主，就是话题的发起者，用户可以倾听他人聊天或者自己聊天，既刺激又真实，也可以选择1对1的单聊，体验两人风情，更加刺激的聊天。<br>4.直播体验，直播分为视频直播和语音直播，视频直播其实也是大同小异了，我比较喜欢里面的语音直播，相当于以前的电台之类的，可以听主播聊天以及和主播聊天。</p>
</blockquote>
<p><strong>8.总结</strong></p>
<blockquote>
<p>微信将短信彻底的变成了验证码，垃圾广告的专属地，而比邻作为电话社交，是否能开辟电话的新的天地呢，比较期待比邻，目前来说比邻的随机电话聊天以及鼓励大家聊天直接使用电话聊天，这些都带给用户一种更加刺激的聊天，希望比邻越来越好。</p>
</blockquote>
<h4 id="探探"><a href="#探探" class="headerlink" title="探探"></a>探探</h4><p><hr><br><strong>1.探探的来源</strong></p>
<blockquote>
<p>探探是一款基于地理位置的移动社交工具。使用者可以在探探上通过左右滑动认识附近的人，左滑再见，右滑喜欢。探探App交友流程可以简单理解为“彼此喜欢-&gt;享受一刻心动的小惊喜-&gt;开始聊天”模式。探探可以免费发送文字消息、语音、照片，和身边的TA更好的交流。</p>
</blockquote>
<p><strong>2.探探的用户群体</strong></p>
<blockquote>
<p>专注于80，90后移动社交，主要添加好友方式是相互喜欢，然后匹配成功互为好友。</p>
</blockquote>
<p><strong>4.探探的功能</strong></p>
<blockquote>
<p>1.查看用户头像图片，探探进入的主界面就是根据定位附近的异性用户并且以大头图片展示。<br>2.查看用户详细信息，点击相应的用户可查看他的信息，标签，兴趣等，还能看到双方的共同点。<br>3.匹配，用户可左滑选择再见，油滑选择喜欢，如果双方互为喜欢则匹配成功。<br>4.聊天，匹配成功的陌生人互为好友，可进行聊天。<br>5.朋友圈，可查看匹配的好友的朋友圈。<br>6.匿名暗恋表白，可选择自己通讯录里的好友进行匿名表白，被表白的用户将会收到一条表白的短信。</p>
</blockquote>
<p><strong>5.探探的体验</strong></p>
<blockquote>
<p>1.匹配体验，用户不能直接和其他用户聊天，必须先互相喜欢，匹配成功才可以进行聊天，而喜欢的过程只需要右滑即可，体验上很好，滑动特别的流畅，并且每一个用户都显示了大头像，让用户一眼就知道是不是自己喜欢的，减少了用户甄别的成本，同时也减少了用户被骚扰以及去骚扰别人的次数，而进行匹配之后用户如果不喜欢对方也可以解除匹配，则对方不会再出现在自己的好友里，自己也会消失在对方的好友里。<br>2.聊天体验，可进行文字，图片，语音聊天等，聊天界面简洁流畅，特别是发送图片以及查看图片都非常的流畅，而在传统的聊天方式上还加入了真心话聊天，可向对方申请真心话聊天，增加了聊天的趣味性和刺激性，而在用户界面还可以看到对方绑定的微信等社交账号，可以更方便的添加该用户的其他社交账号，更好的把双方联系在一起。<br>3.匿名表白体验，简单方便，只需要选择自己的联系人然后确认即可，表白短信就会被发送出去，不需要用户进行其他的操作。</p>
</blockquote>
<p><strong>6.总结</strong></p>
<blockquote>
<p>市面上各种各样的社交软件层出不穷，然而陌生人社交的方式却是大同小异，陌生人社交最大的被骚扰问题也是一直存在，而探探改变陌生人社交的方式，从眼缘，看脸开始，只有互相喜欢才可以聊天，减少用户的别骚扰，同时一旦互相匹配成功从一定程度上可认作双方互相喜欢，互相成为好友，可以看到双方的社交账号以及更详细的个人信息和朋友圈动态，给用户更真实更安全的体验，比较喜欢探探的社交方式，愿探探越来越好。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;hr&gt;&lt;br&gt;看-》想-》写，这是一个重要的过程，以前只看过产品分析，也有想过产品分析，这是第一次写产品分析，分析的内容和方法肯定是有待提高的，希望自己能坚持产品分析并完善吧。&lt;br&gt;最爱社交产品，所以这次拿几个社交产品开始我的第一次产品分析:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;微信–熟人社交&lt;br&gt;陌陌–基于LBS的陌生人社交&lt;br&gt;比邻–电话社交&lt;br&gt;探探–有限制的陌生人社交&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="产品之道" scheme="http://chenyangblog.com/categories/%E4%BA%A7%E5%93%81%E4%B9%8B%E9%81%93/"/>
    
    
      <category term="产品分析" scheme="http://chenyangblog.com/tags/%E4%BA%A7%E5%93%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>idea之慢聊</title>
    <link href="http://chenyangblog.com/2016/06/06/idea-20160606.html"/>
    <id>http://chenyangblog.com/2016/06/06/idea-20160606.html</id>
    <published>2016-06-05T16:05:22.000Z</published>
    <updated>2016-06-05T16:09:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><hr><br>之所以起这个名字，是因为我希望陌生人之间的聊天应该慢慢来，循序渐进，始终以聊天交流为导向，互相排忧解闷，彼此通过交流增进友情。</p>
<p>以前，我总在想如果要做一个社交软件该以什么为切入点，如何能绕过微信，陌陌等社交软件的打击，之前有想过通过人脉圈打入社交，但其实做一个新的社交，我们不一定需要改变方向，我们可以改变方式，此idea源于一次我在比邻上与陌生人打招呼而产生:<br><a id="more"></a><br><img src="http://blog-images01.oss-cn-hangzhou.aliyuncs.com/Screenshot_2016-06-05-00-25-53_com.bilin.huijiao..jpg" alt="alt img"></p>
<h5 id="核心功能点"><a href="#核心功能点" class="headerlink" title="核心功能点"></a>核心功能点</h5><p>1.陌生人之间只允许通过表情或者图片进行交流，因此可以做很多有意思的表情图满足用户需求，还可以增加让用户自制做表情图的功能（最简单的满足一般的需求即可）</p>
<blockquote>
<p>之所以这样做，是为了还网络一片干净，还用户一片干净，对于目前的陌生人社交，其实用户对于陌生人打招呼是没有太多的自主权的，所以很容易就收到骚扰和一些下流难听的话语，而本软件限制陌生人之间只能通过表情和idea进行打招呼和聊天，改变陌生人之间的聊天方式，并且表情和图片其实能做的非常有趣，这样还能有利于某些用户放心大胆的进行社交，传统的社交软件，很多用户不知道如何打招呼和打招呼使用的语言让人不感兴趣，从而回复率较低，降低了用户使用软件的积极性，打击了用户进行陌生人社交的乐趣，因此有必要改变这一方式，由表情和图片出发，这样打招呼者可以使用有趣的表情，被打招呼者也能更好的根据自己的心情进行交流聊天，而不是看文字</p>
</blockquote>
<p>2.用户与用户之间的起初交流是通过表情或者图片，但是当双方互有好感并且想进一步聊天时，只要达到一定的聊天时间限制（此限制可以非常短，只是避免用户总是收到申请进一步聊天的骚扰）可互相申请进行文字或者语音聊天，此二者只可选其一，不仅仅只开放文字申请是因为某些用户可能更喜欢语音聊天，然后再到达一定的聊天时间限制则可进行下一步聊天方式的申请（文字或者语音），一直到最后的视频聊天</p>
<blockquote>
<p>之所以这样做，是铭记着减少用户的被骚扰，增强用户对陌生人聊天的自主性，在这一方面目前是这样做的有探探，她让用户只有互相看对眼匹配后才可进行聊天，这样减少用户被骚扰，增强用户自由选择聊天对象的权利</p>
</blockquote>
<p><em><code>这种设计其实还能避免目前市面上社交软件的抄袭</code></em></p>
<h4 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h4><p>1.头像，签名，标签等基本社交信息<br>2.按距离排序一定时间内在线的用户<br>3.通过设计商家的表情包推荐给用户从而进行商业化<br>4.其他功能，具体再考虑</p>
<h4 id="产品理念"><a href="#产品理念" class="headerlink" title="产品理念"></a>产品理念</h4><p>减少用户的被骚扰，让用户自由筛选聊天对象，增强用户对陌生人聊天的自主性</p>
<p><hr><br><em>热爱社交</em><br><em>愿意把万事万物都与社交关联</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;hr&gt;&lt;br&gt;之所以起这个名字，是因为我希望陌生人之间的聊天应该慢慢来，循序渐进，始终以聊天交流为导向，互相排忧解闷，彼此通过交流增进友情。&lt;/p&gt;
&lt;p&gt;以前，我总在想如果要做一个社交软件该以什么为切入点，如何能绕过微信，陌陌等社交软件的打击，之前有想过通过人脉圈打入社交，但其实做一个新的社交，我们不一定需要改变方向，我们可以改变方式，此idea源于一次我在比邻上与陌生人打招呼而产生:&lt;br&gt;
    
    </summary>
    
      <category term="我的idea" scheme="http://chenyangblog.com/categories/%E6%88%91%E7%9A%84idea/"/>
    
    
      <category term="社交" scheme="http://chenyangblog.com/tags/%E7%A4%BE%E4%BA%A4/"/>
    
  </entry>
  
  <entry>
    <title>idea之艺术88</title>
    <link href="http://chenyangblog.com/2016/05/29/yishu88.html"/>
    <id>http://chenyangblog.com/2016/05/29/yishu88.html</id>
    <published>2016-05-29T14:18:05.000Z</published>
    <updated>2016-06-01T11:54:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><hr><br>今天看到一个产品叫艺术88，一个艺术交易平台，这两天在想这个产品能有什么功能呢？于是有了如下想法。</p>
<p><hr></p>
<h3 id="我是否会在互联网平台上购买艺术品？"><a href="#我是否会在互联网平台上购买艺术品？" class="headerlink" title="我是否会在互联网平台上购买艺术品？"></a>我是否会在互联网平台上购买艺术品？</h3><blockquote>
<p>先说说我在网上购买手机时：<br>1.看配置，配置跟得上潮流我才会选择<br>2.看价格，配置值这个价格我才会选择<br>3.看评论，大部分人都觉得值我才会选择，如果同样的价格因为不懂却买到了过时的产品是会不舒服的，所以我一般会看大家的推荐，然后再自己斟酌<br>4.安全性，我不太会在淘宝买，但是我很放心在小米官网买手机，因为我相信小米官网肯定不会卖到假货的，这就是给了我安全感和信任感<br><a id="more"></a><br>那对于艺术品呢？从价格上来说艺术品不比手机便宜，在我看来是属于奢侈品和收藏品，而且实用性少，需求不强烈，所以我认为购买艺术品会更加在意：<br>1.真伪，花不菲的钱谁也不愿意买到假货<br>2.价值，谁也不愿意花大价格买到低价值的物品<br>3.购买欲，毕竟是不是刚性需求，如何让用户有购买的需求</p>
<p>然而作为一个网络平台，用户无法确切的知道真伪以及价值，况且不是每个用户都了解艺术品并且能够区分，这个时候就需要平台方来保证艺术品的真伪和价值，然而用户对于平台方的这个信任是很难养成的，所以我认为这个时候为了加强用户对平台的信任应该有一个圈子。<br>而对于购买欲，如果用户有一个圈子能够分享自己的收藏品并且从其他人那里得到承认，相信会是很开心的，对于其他用户看到购买艺术品能得到承认并且也有相应的价值相信也会增强自己的购买欲的。</p>
</blockquote>
<h3 id="什么圈子？"><a href="#什么圈子？" class="headerlink" title="什么圈子？"></a>什么圈子？</h3><blockquote>
<p>圈子就是如小米手机中的miui论坛，就是如精英乒乓网中的乒乓论坛，如微信的朋友圈，在这个时代，人人都是很精明的，在购买物品前都会通过网络了解各种信息，所以我们应该制造艺术品的圈子，让用户在这个圈子里能自由的沟通，能够了解自己想要的信息，让用户们互相讨论，互相评价艺术品，以及分享各自的认知，通过圈子加强平台的专业性，从而增强用户的信任度。</p>
</blockquote>
<h3 id="这个圈子应该有的功能"><a href="#这个圈子应该有的功能" class="headerlink" title="这个圈子应该有的功能"></a>这个圈子应该有的功能</h3><blockquote>
<p>1.艺术品讨论，类似话题讨论，让用户自由的互相讨论某个艺术品的文化以及价值，帮助用户更详细的了解某个艺术品，增加购买欲<br>2.艺术家制作艺术品的视频，让用户更加了解某件艺术品的制作过程，从而更加信任艺术品的价值<br>3.买家秀，鼓励买家将自己购买的艺术品进行开贴分享，增加买家的成就感，增加其他用户对平台购买艺术品的信任感<br>4.开放式问答和讨论，解决用户的疑问，给用户讲解相关艺术品的知识文化</p>
</blockquote>
<h3 id="圈子之外应该有"><a href="#圈子之外应该有" class="headerlink" title="圈子之外应该有"></a>圈子之外应该有</h3><blockquote>
<p>1.线下展览，并且将展览信息分享到圈子里或者展览直播，增加平台的专业性，从而增强用户的信任度<br>2.线下分享会，组织用户对在平台上购买的艺术品进行线下分享会，让用户有种购买值得的感觉</p>
</blockquote>
<h3 id="最后的感悟"><a href="#最后的感悟" class="headerlink" title="最后的感悟"></a>最后的感悟</h3><blockquote>
<p>我想对于一个产品来说一定要清楚目标是什么，产品的价值是什么，为了完善产品的价值和目标而去进行功能设计，从而让用户有更好的体验去得到产品的核心价值</p>
</blockquote>
<p><hr><br><em>热爱社交</em><br><em>愿意把万事万物都与社交关联</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;hr&gt;&lt;br&gt;今天看到一个产品叫艺术88，一个艺术交易平台，这两天在想这个产品能有什么功能呢？于是有了如下想法。&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;h3 id=&quot;我是否会在互联网平台上购买艺术品？&quot;&gt;&lt;a href=&quot;#我是否会在互联网平台上购买艺术品？&quot; class=&quot;headerlink&quot; title=&quot;我是否会在互联网平台上购买艺术品？&quot;&gt;&lt;/a&gt;我是否会在互联网平台上购买艺术品？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;先说说我在网上购买手机时：&lt;br&gt;1.看配置，配置跟得上潮流我才会选择&lt;br&gt;2.看价格，配置值这个价格我才会选择&lt;br&gt;3.看评论，大部分人都觉得值我才会选择，如果同样的价格因为不懂却买到了过时的产品是会不舒服的，所以我一般会看大家的推荐，然后再自己斟酌&lt;br&gt;4.安全性，我不太会在淘宝买，但是我很放心在小米官网买手机，因为我相信小米官网肯定不会卖到假货的，这就是给了我安全感和信任感&lt;br&gt;
    
    </summary>
    
      <category term="我的idea" scheme="http://chenyangblog.com/categories/%E6%88%91%E7%9A%84idea/"/>
    
    
      <category term="idea" scheme="http://chenyangblog.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>idea之人脉圈</title>
    <link href="http://chenyangblog.com/2016/05/29/connections.html"/>
    <id>http://chenyangblog.com/2016/05/29/connections.html</id>
    <published>2016-05-29T04:59:27.000Z</published>
    <updated>2017-02-04T12:14:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><hr><br>我想，若干年后再回头看看自己年轻时的想法应该会很有意思，所以我要用博客记录下来。</p>
<p>人脉圈，这是我为这个idea的命名。</p>
<p>记得这个想法的诞生是某天晚上和同学聊换工作的事情，然后骑自行车回家的时候在路上一直想啊想。</p>
<p><hr><br><em>以下是该想法的产品设计</em><br><a id="more"></a></p>
<h3 id="1-关于打开，登录和注册："><a href="#1-关于打开，登录和注册：" class="headerlink" title="1. 关于打开，登录和注册："></a>1. 关于打开，登录和注册：</h3><blockquote>
<p>a. 打开时允许用户在游客模式下查看信息，但是让用户选择感兴趣的类型，通过好的内容吸引用户留下，不能把用户阻挡在门外，但是后期通过评论，留言，收藏，关注，发布需求以及寻找需求等用户主动想触发的功能引导用户注册。</p>
<p>b. 登录时优先让用户通过电话号码登录，也可以额外选择qq，微信登录，但是后期通过用户主动想触发的功能引导用户绑定手机号码，自动匹配用户的qq，微信和通讯录好友，扩大用户的人脉。</p>
<p>c. 注册时通过手机号码注册，主要为了匹配用户的通讯录，而且手机号码有效性更高，用户也更容易记住自己的账号，找回密码时也更方便。</p>
</blockquote>
<h3 id="2-关于用户发布自己的需求以及完成他人的需求："><a href="#2-关于用户发布自己的需求以及完成他人的需求：" class="headerlink" title="2. 关于用户发布自己的需求以及完成他人的需求："></a>2. 关于用户发布自己的需求以及完成他人的需求：</h3><blockquote>
<p>a. 用户A可以发布自己的需求然后进行搜索匹配，匹配用户A的好友，二度好友，三度好友。。。将可以完成用户需求的好友以及好友的好友展现出来，告诉用户有多少个最终的人脉可以帮他完成。</p>
<p>b. 用户可以直接联系好友请求帮忙完成自己的需求，或者请好友联系好友的好友帮忙，或者通过好友将好友的好友以名片形式介绍给自己认识，用户不能直接认识好友的好友，这样做的目的是为了让用户维系自己好友的关系以及通过好友介绍其他人会有更高的可靠性以及熟悉感。</p>
<p>c. 用户A可以发布自己当前能满足的需求，例如：可帮忙百度内推，可帮忙香港代购，发布了需求之后，用户A的好友以及好友的好友就能通过自己想要的需求而匹配搜索到用户A，然后进行联系。</p>
<p>d. 对于人脉的定义，满足的需求和渴望满足的需求不仅仅是工作，但是可以从工作开始而且注重工作，理论上可满足其他需求，比如：我要找代购，然后看看能通过哪个人脉关心帮自己完成。<br>e.    需求不仅仅可以是物质上的，也可以是精神上的，比如骑行，旅游。</p>
</blockquote>
<h3 id="3-关于尽可能帮助用户维系人脉的感情和增加自己的人脉："><a href="#3-关于尽可能帮助用户维系人脉的感情和增加自己的人脉：" class="headerlink" title="3.关于尽可能帮助用户维系人脉的感情和增加自己的人脉："></a>3.关于尽可能帮助用户维系人脉的感情和增加自己的人脉：</h3><blockquote>
<p>a.用户上线时，展示给用户自己的人脉以及人脉可以完成的需求(可以进行百度内推，可以香港代购等人脉展示出来)，让用户时时直到自己的人脉以及可构建的人脉，吸引用户去尽可能的构建自己的人脉。</p>
<p>b.对于好久没联系的人脉，根据时间智能提示该用户哪个人脉已经好久没联系了，该人脉可以帮你满足什么需求，请维护人脉关系。</p>
</blockquote>
<h3 id="4-关于该思路的来源："><a href="#4-关于该思路的来源：" class="headerlink" title="4.关于该思路的来源："></a>4.关于该思路的来源：</h3><blockquote>
<p>a.一直在想微信是熟人社交圈，而如果想摆脱微信另辟蹊径做陌生人社交圈该怎么做？像陌陌一样通过人的本性欲望，异性的吸引来吸引用户？或者像糗事百科一样通过娱乐吸引用户观看然后再切入社交？一天晚上有个同学发来一个职位给我说可以内推，我才惊讶的知道她竟然在xx公司，然后就开始反思为什么我原来不知道，为什么我没有主动找到他，能不能有款软件当我想去百度时就能匹配能内推的好友，想买港版手机时就能匹配准备去香港游玩的好友，而不是我需要时时刻刻去问才能知道，这样的话通过需求建立人脉的关系以及加深关系，而且需求不仅仅可以是工作，还能是其他，通过好友帮助好友这样也是更有容易获得帮助和更有安全感，把陌生人的关系变成熟人关系，就能找工作不愁，有好友内推，找代购不愁，有好友代购。</p>
</blockquote>
<p><hr><br><em>热爱社交</em><br><em>愿意把万事万物都与社交关联</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;hr&gt;&lt;br&gt;我想，若干年后再回头看看自己年轻时的想法应该会很有意思，所以我要用博客记录下来。&lt;/p&gt;
&lt;p&gt;人脉圈，这是我为这个idea的命名。&lt;/p&gt;
&lt;p&gt;记得这个想法的诞生是某天晚上和同学聊换工作的事情，然后骑自行车回家的时候在路上一直想啊想。&lt;/p&gt;
&lt;p&gt;&lt;hr&gt;&lt;br&gt;&lt;em&gt;以下是该想法的产品设计&lt;/em&gt;&lt;br&gt;
    
    </summary>
    
      <category term="我的idea" scheme="http://chenyangblog.com/categories/%E6%88%91%E7%9A%84idea/"/>
    
    
      <category term="idea" scheme="http://chenyangblog.com/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>hexo 搭建以及稍加美化和绑定自定义域名</title>
    <link href="http://chenyangblog.com/2016/05/24/hexo-build.html"/>
    <id>http://chenyangblog.com/2016/05/24/hexo-build.html</id>
    <published>2016-05-24T08:49:01.000Z</published>
    <updated>2016-05-29T05:14:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><hr></p>
<h2 id="配置环境-以mac为例"><a href="#配置环境-以mac为例" class="headerlink" title="配置环境(以mac为例)"></a>配置环境(以mac为例)</h2><p><hr></p>
<h3 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h3><p>到<a href="https://nodejs.org/en/" title="Node" target="_blank" rel="external">这里</a>下载相应平台Node然后进行安装<br>安装完之后通过node –version可查看Node的版本号<br><a id="more"></a></p>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>到<a href="https://git-scm.com/download/" title="Git" target="_blank" rel="external">这里</a>下载相应平台git然后进行安装<br>安装完之后通过git –version可查看Git的版本号</p>
<h3 id="申请自己的github"><a href="#申请自己的github" class="headerlink" title="申请自己的github"></a>申请自己的github</h3><p>作用是将你的hexo博客放到github上，然后就可以通过网址进行访问<br>到<a href="">这里</a>去申请自己的github<br><strong>请注意一点</strong>:  hexo存放在github的项目名必须是你申请的github账号名字(name)，然后才可以通过name.github.io进行访问,所以github尽量申请你喜欢的名字</p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>a. 新建你准备存放博客代码的目录:<br><strong>mkdir blogdir</strong><br><strong>cd blogdir</strong></p>
<p>b.安装hexo:<br><strong>sudo npm install-g hexo</strong></p>
<p>c.初始化 hexo:<br><strong>hexo init</strong></p>
<p>如此我们便安装好了hexo, 接下来就是自己配置blog以及写文章了<br>在blogdir下面会有几个目录:</p>
<blockquote>
<p>_config.yml  db.json      node_modules package.json public       scaffolds    source       themes</p>
</blockquote>
<p>其中我们要用到的有:</p>
<blockquote>
<p>_config.yml—配置网站的基本信息<br>source—新建的文章会在该目录下<br>themes—你的博客的主题以及主题的配置</p>
</blockquote>
<h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>在命令行里面输入:<br><strong>hexo new “name”</strong><br>可以看到会在source/_posts目录下面多了一个name.md文件，这个就是你准备写的文章文件<br>打开之后的可以看到：</p>
<blockquote>
<p>- - -<br>title: new article<br>date: 2016-05-24 16:49:01<br>tags:<br>- - - </p>
</blockquote>
<p>文章的开头用”- - -“括起来的是文章的属性，统一采用yaml格式，下面开始才是文章的正文<br>该属性可以在scaffolds里面的post.md里面预设，是文章的模板<br>文章正文支持markdown语法，可以事先学习学习，提供2个网站学习:<br><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">markdown语法</a><br><a href="http://www.appinn.com/markdown/" target="_blank" rel="external">markdown语法</a></p>
<h3 id="运行hexo"><a href="#运行hexo" class="headerlink" title="运行hexo"></a>运行hexo</h3><p>文章写好之后可在本地启动服务进行文章预览和调试:<br><strong>hexo server</strong><br>在浏览器里面输入<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></p>
<p>确认没问题后生成静态页面:<br><strong>hexo generate (hexo g)</strong><br>然后可将静态页面提交到已配置好的远程服务器，下面介绍如何配置远程服务器</p>
<h3 id="配置github"><a href="#配置github" class="headerlink" title="配置github"></a>配置github</h3><p>hexo搭建的博客是一个静态页面组成的博客，我们可以搭建在任何服务器上，这里我是搭建在github上<br>a.首先在github上新建一个项目仓库，仓库的名字必须是你github账号名字name, 否则是不能通过name.github.io进行访问的<br><img src="http://chenyangblog.bj.bcebos.com/images/1.pic.jpg?authorization=bce-auth-v1%2F517557c6fa47408e810f409152a2fe09%2F2016-05-25T12%3A55%3A55Z%2F600000000%2Fhost%2Fdd6958a87b223caf16917141b83a05656468fa247313aab4f258164a167e557c" alt="alt repository"><br><img src="http://chenyangblog.bj.bcebos.com/images/2.pic.jpg?authorization=bce-auth-v1%2F517557c6fa47408e810f409152a2fe09%2F2016-05-25T12%3A57%3A35Z%2F600000000%2Fhost%2Fa5cc4fd2e187977d9383f544f3e1e1d1fefa85b5225ee1d2ebe4f80878472dba" alt="alt repository"></p>
<p><hr><br><strong>一路点击下去直到新建项目完成，然后就需要将你的新建的项目自动生成为页面，我们需要进入刚刚的项目中找到设置:</strong><br><img src="http://chenyangblog.bj.bcebos.com/images/QQ20160525-4%402x.png?process=none&amp;authorization=bce-auth-v1%2F517557c6fa47408e810f409152a2fe09%2F2016-05-25T12%3A58%3A03Z%2F600000000%2Fhost%2F05bf8f635904a09a83b97a89c469e5d3b7708ee0b653b07ca8824552b7bc2b3f" alt="alt img"><br><img src="http://chenyangblog.bj.bcebos.com/images/QQ20160525-5%402x.png?process=none&amp;authorization=bce-auth-v1%2F517557c6fa47408e810f409152a2fe09%2F2016-05-25T12%3A58%3A26Z%2F600000000%2Fhost%2Fe71a6e8acc0497f9f382b98ed6a0da9bb21068b7cc6d652ec3cbbe7589c50c1e" alt="alt img"></p>
<p>一路点击直到部署成功即可，具体详情可百度.</p>
<p>b.github仓库新建完毕之后，开始建立你的博客与该仓库的关系:<br>打开_config.yml:<br><strong>vim  _config.yml</strong><br>翻到最底下，最新的hexo改成:</p>
<blockquote>
<p>deploy:<br>  type: git<br>  repo: <a href="https://github.com/xyyh/xyyh.github.io.git" target="_blank" rel="external">https://github.com/xyyh/xyyh.github.io.git</a><br>  branch: master</p>
</blockquote>
<p>然后运行以下命令进行git部署工具的安装:<br><strong>npm install hexo-deployer-git –save</strong><br>最后再执行部署命令将代码部署到github:<br><strong>hexo deploy (hexo d)</strong></p>
<p>然后你可以网址: name.github.io，比如我的:xyyh.github.io查看你刚刚新生成的博客了。</p>
<h2 id="hexo-的主题配置以及修改"><a href="#hexo-的主题配置以及修改" class="headerlink" title="hexo 的主题配置以及修改"></a>hexo 的主题配置以及修改</h2><p><hr></p>
<h3 id="配置网站基本信息"><a href="#配置网站基本信息" class="headerlink" title="配置网站基本信息"></a>配置网站基本信息</h3><blockquote>
<p>打开_config：<strong>vim  _config.yml</strong><br>title:  网站名字<br>description:  网站描述<br>author: 网站作者<br>subtitle:  作者签名<br>language:  网站语言(zh-Hans)<br>permalink: :category/:year:month:day/:title.html —文章的链接格式，a/yyyymmdd/title.html<br>default_category: uncategorized —默认分类<br>category_map: —分类目录的的映射<br>  技术之美: technology<br>  产品之道: product<br>  生活杂谈: life<br>tag_map: —标签目录的映射<br>  算法: technology<br>  python: technology<br>  后端: technology<br>  css: technology<br>  前端: technology<br>  c++: technology<br>theme: yilia —网站主题，在这里我喜欢用<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">yilia</a>主题<br> 更多配置信息请到<a href="https://hexo.io/zh-cn/docs/index.html" title="hexo 文档" target="_blank" rel="external">这里</a></p>
</blockquote>
<h3 id="主题的修改-yilia"><a href="#主题的修改-yilia" class="headerlink" title="主题的修改(yilia)"></a>主题的修改(yilia)</h3><p><em>网站的修改基本都是只要修改相应的主题即可</em></p>
<h4 id="添加数据统计"><a href="#添加数据统计" class="headerlink" title="添加数据统计"></a>添加数据统计</h4><p><em>网站的访问量统计和文章阅读量统计</em><br>我使用的是<a href="http://service.ibruce.info/" target="_blank" rel="external">不蒜子</a>的统计代码<br>打开layout/_partial/after-footer.ejs，在&lt;%- partial(‘google-analytics’) %&gt;后面(也可以直接在最后面)加入:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>我的统计是加载页面底部，所以打开layout/_partial/footer.ejs，加入:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">&lt;div class=<span class="string">"footer-center"</span>&gt;</div><div class="line">    本站有&lt;span id=<span class="string">"busuanzi_value_site_uv"</span> class=<span class="string">"tongji-num"</span>&gt;&lt;/span&gt;人访问 |</div><div class="line">    本页有&lt;span id=<span class="string">"busuanzi_value_page_pv"</span> class=<span class="string">"tongji-num"</span>&gt;&lt;/span&gt;次访问</div><div class="line">&lt;/div&gt;</div><div class="line">...</div></pre></td></tr></table></figure></p>
<p>这样子网站的数据统计就可以了，然后可以根据自己的爱好修改样式</p>
<h4 id="添加文章目录"><a href="#添加文章目录" class="headerlink" title="添加文章目录"></a>添加文章目录</h4><p>打开layout/_partial/post/toc.ejs，如果没有就创建，加入如下代码，其中的js代码是配合我的样式用的，可以不需要:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;div id=<span class="string">"toc"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"toc-article"</span>&gt;</div><div class="line">    &lt;%- toc(post.content, &#123;list_number: true&#125;) %&gt;</div><div class="line">    &lt;div class="toc-title"&gt;隐藏目录&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">$(<span class="string">"#toc .toc-title"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> textDire = $(<span class="string">"#toc .toc"</span>);</div><div class="line">    <span class="keyword">if</span>(textDire.attr(<span class="string">"flag"</span>) === <span class="string">"hidden"</span>) &#123;</div><div class="line">        textDire.fadeIn().attr(<span class="string">"flag"</span>, <span class="string">"show"</span>);</div><div class="line">        $(<span class="keyword">this</span>).text(<span class="string">"隐藏目录"</span>).css(&#123;<span class="string">"border-left"</span>: <span class="string">"1px solid #ddd"</span>, <span class="string">"border-bottom"</span>: <span class="string">"1px solid #ddd"</span>&#125;);</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">        textDire.fadeOut().attr(<span class="string">"flag"</span>, <span class="string">"hidden"</span>)</div><div class="line">        $(<span class="keyword">this</span>).text(<span class="string">"展开目录"</span>).css(&#123;<span class="string">"border-left"</span>: <span class="string">"0"</span>, <span class="string">"border-bottom"</span>: <span class="string">"0"</span>&#125;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">var</span> tocDom = $(<span class="string">"#toc"</span>),</div><div class="line">    tocTop = tocDom.offset().top,</div><div class="line">    sucFixed = <span class="literal">false</span>;</div><div class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"scroll"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> scrollTop = $(<span class="keyword">this</span>).scrollTop();</div><div class="line">    <span class="keyword">if</span>(!sucFixed &amp;&amp; scrollTop &gt; tocTop) &#123;</div><div class="line">        tocDom.addClass(<span class="string">'toc-fixed'</span>);</div><div class="line">        sucFixed = <span class="literal">true</span>;</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sucFixed &amp;&amp; scrollTop &lt;= tocTop) &#123;</div><div class="line">        tocDom.removeClass(<span class="string">'toc-fixed'</span>);</div><div class="line">        sucFixed = <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<p>打开layout/_partial/after-footer.ejs，把<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;%- js(<span class="string">'http://7.url.cn/edu/jslib/comb/require-2.1.6,jquery-1.9.1.min'</span>) %&gt;</div></pre></td></tr></table></figure></p>
<p>剪切到layout/_partial/head.ejs最下面的之上</p>
<p>打开layout/_partial/article.ejs，加入:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"article-entry"</span> itemprop=<span class="string">"articleBody"</span>&gt;</div><div class="line">   &lt;% if (post.excerpt &amp;&amp; index)&#123; %&gt;</div><div class="line">     &lt;%- post.excerpt %&gt;</div><div class="line">   &lt;% &#125; else &#123; %&gt;</div><div class="line">     //下面三行表示给文章添加目录</div><div class="line">     &lt;% if (post.toc !== false) &#123; %&gt; //默认开启目录</div><div class="line">         &lt;%- partial("post/toc") %&gt;</div><div class="line">     &lt;% &#125; %&gt;</div><div class="line">     &lt;%- post.content %&gt;</div><div class="line">   &lt;% &#125; %&gt;</div><div class="line"> &lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>这样子给文章添加目录就完成了，接下来就是修改目录的样式了<br>进入source/css/_partial，添加toc.styl，代码如下:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.toc-article</span> &#123;</div><div class="line">    <span class="attribute">z-index</span>: <span class="number">2</span>;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">right</span>: -<span class="number">1px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">20px</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</div><div class="line">    <span class="attribute">box-shadow</span>: -<span class="number">2px</span> <span class="number">2px</span> <span class="number">3px</span> <span class="number">#ddd</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.toc-fixed</span> &#123;</div><div class="line">    <span class="attribute">position</span>: fixed;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">right</span>: <span class="number">30px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#toc</span> <span class="selector-class">.toc-title</span> &#123;</div><div class="line">    <span class="attribute">float</span>: right;</div><div class="line">    <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">16px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">2px</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#CFA188</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#f9f9f9</span>;</div><div class="line">    <span class="attribute">cursor</span>: pointer;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#toc</span> <span class="selector-class">.toc-title</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#BA8F6C</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#toc</span> <span class="selector-class">.toc</span> &#123;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">8px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#toc</span> <span class="selector-tag">li</span>, <span class="selector-class">.toc</span> <span class="selector-tag">li</span> &#123;</div><div class="line">    <span class="attribute">list-style-type</span>: none</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#toc</span> <span class="selector-tag">ol</span> &#123;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#toc</span> <span class="selector-class">.toc-child</span> &#123;</div><div class="line">    <span class="attribute">padding-left</span>: <span class="number">16px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打开source/css/style.styl，顶部添加:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">import</span> <span class="string">"_partial/toc"</span></div></pre></td></tr></table></figure></p>
<p>这样子文章的目录配置完毕</p>
<h3 id="添加分类和归档"><a href="#添加分类和归档" class="headerlink" title="添加分类和归档"></a>添加分类和归档</h3><p>我的分类和归档都是添加在左边的菜单栏里，所以打开layout/_partial/left-col.ejs<br>添加如下代码:<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;div class="switch-area"&gt;</div><div class="line">...</div><div class="line">&lt;section class="switch-part switch-part2"&gt;</div><div class="line">    &lt;div class="widget category" id="js-category"&gt;</div><div class="line">        &lt;%- list_categories() %&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/section&gt;</div><div class="line"></div><div class="line">&lt;section class="switch-part switch-part3"&gt;</div><div class="line">    &lt;div class="widget archive" id="js-archive"&gt;</div><div class="line">        &lt;%- list_archives(&#123;format: "YYYY年MM月"&#125;) %&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/section&gt;</div><div class="line">...</div><div class="line">div&gt;</div></pre></td></tr></table></figure></p>
<p>这样分类和归档就出来了，剩下的就是调整样式，这个代码就不贴出来了，有需要可以直接去看我修改后的<a href="https://github.com/xyyh/perfect" target="_blank" rel="external">主题</a></p>
<h3 id="配置评论框"><a href="#配置评论框" class="headerlink" title="配置评论框"></a>配置评论框</h3><p>我采用的是多说评论，打开主题中的_config.yml，找到duoshuo: xxx 并配置成你的多说项目名，比如你创建的多说项目的网址是xxx.duoshuo.com，那么配置的就是这个xxx。<br>另外我对自己的多说也修改了样式，样式代码如下:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-tag">ul</span><span class="selector-class">.ds-children</span> <span class="selector-class">.ds-avatar</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">30px</span>;</div><div class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</div><div class="line">    <span class="attribute">margin-left</span>: -<span class="number">19px</span>;</div><div class="line">    <span class="attribute">margin-top</span>: <span class="number">11px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-avatar</span> &#123;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> <span class="built_in">rgba</span>(255,255,255,0.75);</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">-webkit-border-radius</span>: <span class="number">3px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#eee</span>;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</div><div class="line">    <span class="attribute">margin-left</span>: -<span class="number">38px</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-avatar</span> <span class="selector-tag">img</span> &#123;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-post-self</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">#B8B9B9</span> <span class="number">0</span> <span class="number">1px</span> <span class="number">3px</span>;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#f7f7f7</span>;</div><div class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-tag">li</span><span class="selector-class">.ds-post</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(100% - 19px);</div><div class="line">    <span class="attribute">margin-left</span>: <span class="number">19px</span>;</div><div class="line">    <span class="attribute">clear</span>: both;</div><div class="line">    <span class="attribute">margin-bottom</span>: <span class="number">15px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">list-style</span>: none;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</div><div class="line">    <span class="attribute">overflow</span>: visible;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-comments</span> &#123;</div><div class="line">    <span class="attribute">border-bottom</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-replybox</span> <span class="selector-class">.ds-avatar</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">left</span>: <span class="number">30px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-textarea-wrapper</span> <span class="selector-tag">textarea</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#f7f7f7</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#ds-thread</span> <span class="selector-id">#ds-reset</span> <span class="selector-class">.ds-post-options</span> &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#f7f7f7</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h2><p><hr><br>1.在阿里云上购买自己的域名: <a href="https://wanwang.aliyun.com/" target="_blank" rel="external">购买域名</a><br>2.打开云解析 -&gt; 点击自己购买的域名进入域名接下，然后添加解析，见下图:<br><img src="http://chenyangblog.bj.bcebos.com/images/QQ20160526-1%402x.png?process=none&amp;authorization=bce-auth-v1%2F517557c6fa47408e810f409152a2fe09%2F2016-05-26T06%3A47%3A42Z%2F600000000%2Fhost%2F72d5298355247525130ac5ee592a154422ad2ae6f0c9be8c1ba1a830e1b5891a" alt="alt img"><br><img src="http://chenyangblog.bj.bcebos.com/images/QQ20160526-0%402x.png?process=none&amp;authorization=bce-auth-v1%2F517557c6fa47408e810f409152a2fe09%2F2016-05-26T06%3A49%3A38Z%2F6000000%2Fhost%2Fa7e1cfe6c4492409dcf1428b6d10df35ae14e5317c3d503b5e6cba7b60130f76" alt="alt img"><br><em>第一个记录值是自己博客服务器的ip，不知道自己的github的ip值可以ping name.github.io获取</em><br>3.在source/ 目录下添加CNAME文件并且写入你申请的域名<br>4.hexo g编译代码然后hexo d进行部署<br>5.域名配置完成，可以试试自己的域名了。</p>
<p><hr><br><strong>最后如果需要让搜索引擎能搜索到自己的文章，请参考hexo seo优化，提供一个教程:</strong><br><a href="http://www.zaoanx.com/Hexo-SEO%E4%BC%98%E5%8C%96.html" target="_blank" rel="external">hexo seo优化</a></p>
<p><em>本文结束，谢谢！</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;h2 id=&quot;配置环境-以mac为例&quot;&gt;&lt;a href=&quot;#配置环境-以mac为例&quot; class=&quot;headerlink&quot; title=&quot;配置环境(以mac为例)&quot;&gt;&lt;/a&gt;配置环境(以mac为例)&lt;/h2&gt;&lt;p&gt;&lt;hr&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装Node&quot;&gt;&lt;a href=&quot;#安装Node&quot; class=&quot;headerlink&quot; title=&quot;安装Node&quot;&gt;&lt;/a&gt;安装Node&lt;/h3&gt;&lt;p&gt;到&lt;a href=&quot;https://nodejs.org/en/&quot; title=&quot;Node&quot;&gt;这里&lt;/a&gt;下载相应平台Node然后进行安装&lt;br&gt;安装完之后通过node –version可查看Node的版本号&lt;br&gt;
    
    </summary>
    
      <category term="技术之美" scheme="http://chenyangblog.com/categories/%E6%8A%80%E6%9C%AF%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="hexo" scheme="http://chenyangblog.com/tags/hexo/"/>
    
      <category term="技术" scheme="http://chenyangblog.com/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>新的博客，新的记录</title>
    <link href="http://chenyangblog.com/2016/05/23/new-blog.html"/>
    <id>http://chenyangblog.com/2016/05/23/new-blog.html</id>
    <published>2016-05-23T03:25:18.000Z</published>
    <updated>2016-05-29T04:58:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><hr><br>博客经过陆陆续续一周的搭建修改，总算完成了。</p>
<h3 id="我为什么要写博客"><a href="#我为什么要写博客" class="headerlink" title="我为什么要写博客"></a>我为什么要写博客</h3><p>其实已经很久没写博客了，大概从大四开始就荒废了，已有两年，但是最近越来越感觉我对博客的需求，对于生活感想，工作感想，技术分享，学习总结等我都迫切的需要一个能记录的地方，这就是我为什么要写博客。<br><a id="more"></a></p>
<h3 id="我为什么要用hexo"><a href="#我为什么要用hexo" class="headerlink" title="我为什么要用hexo"></a>我为什么要用hexo</h3><p>以前的博文都是写在csdn上，现在想从新书写，打开了以前的博客，总觉得广告比较多，不够简洁，而既然博客将成为我记录生活，总结和分享的地方，那我应该拥有一个个人的博客，选择hexo因为简洁，因为它的思想：把更多的精力放在内容上</p>
<h3 id="写博客的好处"><a href="#写博客的好处" class="headerlink" title="写博客的好处"></a>写博客的好处</h3><ol>
<li>记录，想要回忆自己以前的东西时很方便</li>
<li>记忆，写博客是对自己脑海中的东西重新梳理一遍，有时我们想不清楚的东西在书写中能慢慢的理清，一篇博文写下来会加深自己的印象和理解</li>
<li>沟通，我认为写博客能增强沟通能力，沟通能力不是性格的外向，而是如何简单快速的把自己心中的东西描述清楚给其他人，用心的写博客，如何更清晰的把心中的东西分享给他人，我认为这就是在增强自己沟通能力的成果</li>
<li>成就，对于我来说，每每看到自己的博文被越来越多的人浏览，越来越多的人因此而有收获，我会觉得特别开心，所以用心写博客，会给我带来成就感。</li>
</ol>
<h3 id="关于原来的博客"><a href="#关于原来的博客" class="headerlink" title="关于原来的博客"></a>关于原来的博客</h3><p>原来的博客我是在csdn上写的，很开心有人因为我的一些文章而学到了东西，但是我应该不会继续维护了，这个新的博客目前没什么内容，我会慢慢增加的而且不局限于技术，如果有想要看算法的可以去看我以前的老博客:<br><a href="http://blog.csdn.net/xingyeyongheng?viewmode=list" target="_blank" rel="external">淡淡的夜色</a><br><img src="http://blog-images01.oss-cn-hangzhou.aliyuncs.com/QQ20160529-0%402x.png" alt="img"><br><em>其实文章还是挺多的，而且有单篇破万，这是让我最开心的，也是更加让我想认真的写博客</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;hr&gt;&lt;br&gt;博客经过陆陆续续一周的搭建修改，总算完成了。&lt;/p&gt;
&lt;h3 id=&quot;我为什么要写博客&quot;&gt;&lt;a href=&quot;#我为什么要写博客&quot; class=&quot;headerlink&quot; title=&quot;我为什么要写博客&quot;&gt;&lt;/a&gt;我为什么要写博客&lt;/h3&gt;&lt;p&gt;其实已经很久没写博客了，大概从大四开始就荒废了，已有两年，但是最近越来越感觉我对博客的需求，对于生活感想，工作感想，技术分享，学习总结等我都迫切的需要一个能记录的地方，这就是我为什么要写博客。&lt;br&gt;
    
    </summary>
    
      <category term="生活杂谈" scheme="http://chenyangblog.com/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%B0%88/"/>
    
    
  </entry>
  
</feed>
